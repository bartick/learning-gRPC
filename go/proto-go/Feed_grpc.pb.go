// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: Feed.proto

package feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedServiceClient is the client API for FeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServiceClient interface {
	// get a specific feed by id
	GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedReply, error)
	// get all feeds
	GetAllFeeds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllFeeds, error)
	// create a new feed
	PostFeed(ctx context.Context, in *FeedPost, opts ...grpc.CallOption) (*FeedReply, error)
	// delete a feed by id
	DeleteFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedSuccess, error)
}

type feedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServiceClient(cc grpc.ClientConnInterface) FeedServiceClient {
	return &feedServiceClient{cc}
}

func (c *feedServiceClient) GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedReply, error) {
	out := new(FeedReply)
	err := c.cc.Invoke(ctx, "/feed.FeedService/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetAllFeeds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllFeeds, error) {
	out := new(AllFeeds)
	err := c.cc.Invoke(ctx, "/feed.FeedService/GetAllFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) PostFeed(ctx context.Context, in *FeedPost, opts ...grpc.CallOption) (*FeedReply, error) {
	out := new(FeedReply)
	err := c.cc.Invoke(ctx, "/feed.FeedService/PostFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) DeleteFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedSuccess, error) {
	out := new(FeedSuccess)
	err := c.cc.Invoke(ctx, "/feed.FeedService/DeleteFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServiceServer is the server API for FeedService service.
// All implementations should embed UnimplementedFeedServiceServer
// for forward compatibility
type FeedServiceServer interface {
	// get a specific feed by id
	GetFeed(context.Context, *FeedRequest) (*FeedReply, error)
	// get all feeds
	GetAllFeeds(context.Context, *emptypb.Empty) (*AllFeeds, error)
	// create a new feed
	PostFeed(context.Context, *FeedPost) (*FeedReply, error)
	// delete a feed by id
	DeleteFeed(context.Context, *FeedRequest) (*FeedSuccess, error)
}

// UnimplementedFeedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFeedServiceServer struct {
}

func (UnimplementedFeedServiceServer) GetFeed(context.Context, *FeedRequest) (*FeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedFeedServiceServer) GetAllFeeds(context.Context, *emptypb.Empty) (*AllFeeds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFeeds not implemented")
}
func (UnimplementedFeedServiceServer) PostFeed(context.Context, *FeedPost) (*FeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFeed not implemented")
}
func (UnimplementedFeedServiceServer) DeleteFeed(context.Context, *FeedRequest) (*FeedSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeed not implemented")
}

// UnsafeFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServiceServer will
// result in compilation errors.
type UnsafeFeedServiceServer interface {
	mustEmbedUnimplementedFeedServiceServer()
}

func RegisterFeedServiceServer(s grpc.ServiceRegistrar, srv FeedServiceServer) {
	s.RegisterService(&FeedService_ServiceDesc, srv)
}

func _FeedService_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetFeed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetAllFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetAllFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/GetAllFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetAllFeeds(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_PostFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).PostFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/PostFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).PostFeed(ctx, req.(*FeedPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_DeleteFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).DeleteFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/DeleteFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).DeleteFeed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedService_ServiceDesc is the grpc.ServiceDesc for FeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.FeedService",
	HandlerType: (*FeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeed",
			Handler:    _FeedService_GetFeed_Handler,
		},
		{
			MethodName: "GetAllFeeds",
			Handler:    _FeedService_GetAllFeeds_Handler,
		},
		{
			MethodName: "PostFeed",
			Handler:    _FeedService_PostFeed_Handler,
		},
		{
			MethodName: "DeleteFeed",
			Handler:    _FeedService_DeleteFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Feed.proto",
}
